{"version":3,"sources":["Components/Cards.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filtredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uNAaeA,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,6BAASC,UAAU,oDACjB,4BAAKF,GACL,yBAAKG,IAAI,sBAAiBC,IAAG,+BAA0BL,EAA1B,kBAC7B,2BAAIE,KCWKI,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,0BAAMJ,UAAU,MACXI,EAAOC,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,CACIC,IAAKJ,EAAOG,GAAOV,GACnBA,GAAIO,EAAOG,GAAOV,GAClBC,KAAMM,EAAOG,GAAOT,KACpBC,MAAOK,EAAOG,GAAOR,aCC1BU,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,2BACIV,UAAU,uCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,KCEPI,EARA,SAACC,GACZ,OACI,6BAASC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACzCH,EAAMI,WCsCJC,G,kBApCX,aAAc,IAAD,8BACT,+CAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAM,CACPvB,OAAQ,GACRoB,YAAa,IAJR,E,iFAYQ,IAAD,OAChBI,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAErC,IAAD,EAC0BC,KAAKN,MAA5BvB,EADH,EACGA,OAAQoB,EADX,EACWA,YAETU,EAAe9B,EAAO+B,QAAQ,SAAAC,GAAK,OACrCA,EAAMtC,KAAKuC,cAAcC,SAASd,EAAYa,kBAE9C,OAAQjC,EAAOmC,OAEd,oCACG,4BAAQvC,UAAU,MACd,wBAAIA,UAAU,WAAd,eACA,kBAAC,EAAD,CAAWU,aAAcuB,KAAKZ,kBAElC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAAQ8B,MAP1B,wBAAIlC,UAAU,UAAd,e,GAzBMwC,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.24c6e386.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({id, name, email}) => {\n  return (\n    <section className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <h2>{name}</h2>\n      <img alt=\"zdjÄ™cie robota\" src={`https://robohash.org/${id}?200x200.png`} />\n      <p>{email}</p>\n    </section>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './Cards'\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <main className='tc'>\r\n            {robots.map((user, index) => \r\n                <Card \r\n                    key={robots[index].id} \r\n                    id={robots[index].id} \r\n                    name={robots[index].name} \r\n                    email={robots[index].email} \r\n                /> \r\n            )}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <input \r\n            className='pa3 mb3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <section style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport '../styles/App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then( response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n\r\n        const filtredRobots= robots.filter( robot => \r\n            robot.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n        \r\n            return !robots.length ? \r\n            <h1 className='tc ma4'>LOADING</h1> :\r\n            (<>\r\n                <header className='tc'>\r\n                    <h1 className='f1 ma4 '>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                </header>\r\n                <Scroll>\r\n                    <CardList robots={filtredRobots} />\r\n                </Scroll>\r\n            </>)\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}